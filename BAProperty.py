import bpy
import os
from .BAOperator import BilingualAddonUtils as utils

class LocalePath(bpy.types.PropertyGroup):
    def _checkLocalePath(self):
        if not os.path.exists(self.path):
            return f"[ERROR]: '{self.path}' not exists!"
        else:
            return f"[SUCCESS]: '{self.path}' exists"
    
    def _getLocalPath(self):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        localePath = propGroup.localePathCollection.collection[propGroup.localePathCollection.index]
        return localePath.path
    
    path: bpy.props.StringProperty(
        subtype='DIR_PATH',
        name="LocalePath",
        description="The path of the 'locale' folder, with the default value derived from searching in the parent directory of 'bpy.app.binary_path' (excluding the 'scripts' folder), ''",
        default="",
        get=lambda self: self._getLocalPath(),
        set=lambda self, value: None,
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="msg",
        description="LocalePath message",
        default="",
        get=lambda self: self._checkLocalePath(),
        set=lambda self, value: None,
    ) # type: ignore

class LocalePath1(bpy.types.PropertyGroup):    
    path: bpy.props.StringProperty(
        # subtype='DIR_PATH',
        name="LocalePath1",
        description="The path of the 'locale' folder, with the default value derived from searching in the parent directory of 'bpy.app.binary_path' (excluding the 'scripts' folder), ''",
        default="",
    ) # type: ignore

class SavePath(bpy.types.PropertyGroup):
    def _checkSavePath(self):
        if not os.path.exists(self.path):
            return f"[ERROR]: '{self.path}' not exists!"
        else:
            return f"[SUCCESS]: '{self.path}' exists"
    
    def _update(self, context):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        propGroup.bilingualCollection.update()

    path: bpy.props.StringProperty(
        subtype='DIR_PATH',
        name="SavePath",
        description="The save path for files generated by this addon.",
        default=utils.getSavePath(),
        update=_update,
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="msg",
        description="SavePath message",
        default="",
        get=lambda self: self._checkSavePath(),
        set=lambda self, value: None,
    ) # type: ignore

class LanguageList1(bpy.types.PropertyGroup):
    def _checkLanguagePath(self):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        file = os.path.join(propGroup.localePath.path, utils.moRelativePath.format(self.language))
        if self.language.startswith("en"):
            return f"[SUCCESS]: '{self.language}' pass"
        elif not os.path.isfile(file):
            return f"[ERROR]: '{file}' not exists!"
        else:
            return f"[SUCCESS]: '{file}' exists"
    
    language: bpy.props.EnumProperty(
        name="Language 1",
        description="Generated based on 'LocalePath'",
        items=utils.getLanguages,
        default=0,
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="language Path 1",
        description="Display language1 Path",
        default="language Path 1",
        get=lambda self: self._checkLanguagePath(),
        set=lambda self, value: None,
    ) # type: ignore

class LanguageList2(bpy.types.PropertyGroup):
    def _checkLanguagePath(self):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        file = os.path.join(propGroup.localePath.path, utils.moRelativePath.format(self.language))
        if self.language.startswith("en"):
            return f"[SUCCESS]: '{self.language}' pass"
        elif not os.path.isfile(file):
            return f"[ERROR]: '{file}' not exists!"
        else:
            return f"[SUCCESS]: '{file}' exists"
    
    language: bpy.props.EnumProperty(
        name="Language 2",
        description="Generated based on 'LocalePath'",
        items=utils.getLanguages,
        default=0,
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="language Path 2",
        description="Display language1 Path",
        default="language Path 2",
        get=lambda self: self._checkLanguagePath(),
        set=lambda self, value: None,
    ) # type: ignore

class Backup(bpy.types.PropertyGroup): 
    def _checkBackupLanguages(self):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        oriFolder = propGroup.localePath.path
        bakFolder = os.path.normpath(propGroup.localePath.path) + ".bak"
        if not os.path.isdir(oriFolder):
            self.msg = f"[ERROR]: '{oriFolder}' not exists!"
            return False
        if not os.path.isdir(bakFolder):
            self.msg = f"[ERROR]: '{bakFolder}' not exists!"
            return True
        else:
            self.msg = f"[SUCCESS]: '{bakFolder}' exists"
            return False

    enable: bpy.props.BoolProperty(
        name="Enabled",
        description="Enable or disable the button",
        default=False,
        get=lambda self: self._checkBackupLanguages(),
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="Generate state",
        description="Generate state",
        default="[INFO]: Click Backup",
    ) # type: ignore

class Restore(bpy.types.PropertyGroup): 
    def _checkBackupLanguages(self):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        bakFolder = os.path.normpath(propGroup.localePath.path) + ".bak"
        if not os.path.isdir(bakFolder):
            return False
        else:
            return True
        
    name: bpy.props.StringProperty(
        default="Restore",
    ) # type: ignore

    operator: bpy.props.StringProperty(
        default="operator.restore_languages",
    ) # type: ignore

    enable: bpy.props.BoolProperty(
        name="Enabled",
        description="Enable or disable the button",
        default=False,
        get=lambda self: self._checkBackupLanguages(),
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="Restore state",
        description="Restore state",
        default="[INFO]: Click Restore",
    ) # type: ignore

class Generate(bpy.types.PropertyGroup):
    def force_ui_update(self, context):
        # bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)
        for area in context.screen.areas:
            if area.type == 'PREFERENCES':
                area.tag_redraw()
                break

    enable: bpy.props.BoolProperty(
        name="Enabled",
        description="Enable or disable the button",
        default=True,
    ) # type: ignore
        
    msg: bpy.props.StringProperty(
        name="Generate state",
        description="Generate state",
        default="[INFO]: Click Generate",
        update=lambda self, context: self.force_ui_update(context)
    ) # type: ignore

class Checkbox(bpy.types.PropertyGroup):
    name: bpy.props.StringProperty(
        name="Name"
    ) # type: ignore
    checked: bpy.props.BoolProperty(
        name="Checked",
        description="Checkbox",
        default=False
    ) # type: ignore
    path: bpy.props.StringProperty(
        name="BilingualList Path 2",
        description="Display language1 Path",
        default="language Path 2",
    ) # type: ignore

class BilingualCollection(bpy.types.PropertyGroup):
    def update(self):
        self.collection.clear()
        bilingualList = utils.getBilingual()
        for name, dirPath, _ in bilingualList:
            item = self.collection.add()
            item.name = name
            item.checked = False
            item.path = dirPath
    
    def _getCheck(self):
        checkList = []
        for checkbox in self.collection:
            if checkbox.checked:
                checkList.append([checkbox.name, checkbox.path])
        return checkList
    
    def _getList(self):
        res = []
        for checkbox in self.collection:
            res.append(checkbox.name)
        return res
    
    def _checkBackupLanguages(self):
        propGroup = bpy.context.preferences.addons[__package__].preferences.propGroup
        bakFolder = os.path.normpath(propGroup.localePath.path) + ".bak"
        if not os.path.isdir(bakFolder):
            self.msg = f"[ERROR]: Backup first!"
            return False
        else:
            return True
    
    applyEnable: bpy.props.BoolProperty(
        name="Enabled",
        description="Enable or disable the button",
        default=False,
        get=lambda self: self._checkBackupLanguages(),
    ) # type: ignore

    collection: bpy.props.CollectionProperty(
        type=Checkbox
    ) # type: ignore

    msg: bpy.props.StringProperty(
        name="Msg",
        description="msg",
        default="[INFO]: Click Update, Delete, Apply",
    ) # type: ignore

class LocalePathCollection(bpy.types.PropertyGroup):
    def getDefault(self):
        self.index = 0
        self.collection.clear()
        localePathList = utils.getLocalePathList()
        for localePath in localePathList:
            item = self.collection.add()
            item.path = localePath

    collection: bpy.props.CollectionProperty(
        type=LocalePath1
    ) # type: ignore

    index: bpy.props.IntProperty(
        name="Index for select",
        default=0
    ) # type: ignore

class BilingualAddonPropGroup(bpy.types.PropertyGroup):
    localePath: bpy.props.PointerProperty(type=LocalePath)
    savePath: bpy.props.PointerProperty(type=SavePath)
    languageList1: bpy.props.PointerProperty(type=LanguageList1)
    languageList2: bpy.props.PointerProperty(type=LanguageList2)
    backup: bpy.props.PointerProperty(type=Backup)
    restore: bpy.props.PointerProperty(type=Restore)
    generate: bpy.props.PointerProperty(type=Generate)
    checkbox: bpy.props.PointerProperty(type=Checkbox)
    bilingualCollection: bpy.props.PointerProperty(type=BilingualCollection)
    localePath1: bpy.props.PointerProperty(type=LocalePath1)
    localePathCollection: bpy.props.PointerProperty(type=LocalePathCollection)

    cls = [
        LocalePath, 
        SavePath,
        LanguageList1, 
        LanguageList2, 
        Backup,
        Restore,
        Generate, 
        Checkbox,
        BilingualCollection,
        LocalePath1,
        LocalePathCollection,
    ]